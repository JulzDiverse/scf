#!/usr/bin/env bash

set -o errexit -o nounset

: "${GIT_ROOT:=$(git rev-parse --show-toplevel)}"
cd "${GIT_ROOT}"

source "${GIT_ROOT}/make/include/secrets"
source "${GIT_ROOT}/make/include/defaults"
source "${GIT_ROOT}/make/include/has_namespace"

has_internal_ca() {
    test "$(get_secret "${UAA_NAMESPACE}" "uaa" "INTERNAL_CA_CERT")" != ""
}

stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run start

stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run::namespace start
"${GIT_ROOT}/make/stop"

printf "Waiting for namespace %s to be deleted...\n" "${NAMESPACE}"
while has_namespace "${NAMESPACE}"; do
    sleep 1
done

kubectl create namespace "${NAMESPACE}"
stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run::namespace end

helm_args=(
    --name "${NAMESPACE}"
    --namespace "${NAMESPACE}"
    --values "bin/settings.yaml"
    --set "kube.storage_class.persistent=${STORAGE_CLASS}"
)

if [ "${EMBEDDED_UAA:-false}" != "true" ]; then
    stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run::ca-cert start

    printf "Waiting for uaa cert to be generated by the uaa chart...\n"
    until has_internal_ca ; do
        sleep 1
    done

    CA_CERT="$(get_secret "${UAA_NAMESPACE}" "uaa" "INTERNAL_CA_CERT")"

    helm_args+=(
        --set "secrets.UAA_CA_CERT=${CA_CERT}"
    )

    stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run::ca-cert end
else
    helm_args+=(
        --set "enable.uaa=true"
    )
fi

stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run::create start

kubectl get storageclass | grep --silent '(default)' 2>/dev/null || {
    perl -p -e 's@storage.k8s.io/v1beta1@storage.k8s.io/v1@g' \
        "${GIT_ROOT}/src/uaa-fissile-release/kube-test/storage-class-host-path.yml" | \
    kubectl create -f -
}

: "${TCP_DOMAIN:=tcp.${DOMAIN}}"
: "${INSECURE_DOCKER_REGISTRIES:=\"insecure-registry.${TCP_DOMAIN}:20005\"}"

helm_args+=(
    --set "env.DOMAIN=${DOMAIN}"
    --set "env.TCP_DOMAIN=${TCP_DOMAIN}"
    --set "env.UAA_HOST=${UAA_HOST}"
    --set "env.INSECURE_DOCKER_REGISTRIES=${INSECURE_DOCKER_REGISTRIES}"
)

if [ -n "${INGRESS_CONTROLLER:-}" ]; then
    helm_args+=(
        --set "ingress.enabled=true"
        --set "ingress.annotations.kubernetes\.io\/ingress\.class=${INGRESS_CONTROLLER}"
        --set "env.UAA_PORT=443"
    )
else
    helm_args+=(
        --set "kube.external_ips[0]=$(getent hosts "${DOMAIN}" | awk 'NR=1{print $1}')"
        --set "env.UAA_PORT=${UAA_PORT}"
    )
fi

echo helm install "${CF_CHART}" "${helm_args[@]}" "$@"

helm install "${CF_CHART}" "${helm_args[@]}" "$@"

stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run::create end

stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run 'done'
