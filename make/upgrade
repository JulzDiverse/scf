#!/usr/bin/env bash

# Upgrade a running CF using the current chart in output/helm. Assumes
# that only one revision is currently running. If more than one runs
# the last per helm's sorting order is chosen. (See **)

set -o errexit -o nounset

: "${GIT_ROOT:=$(git rev-parse --show-toplevel)}"
cd "${GIT_ROOT}"

source "${GIT_ROOT}/make/include/defaults"
source "${GIT_ROOT}/make/include/secrets"

# Argument? (**)
# Setting the helm name to the namespace makes cleanup easier
RELEASE=${NAMESPACE}
echo Upgrading ${NAMESPACE} release \"${RELEASE}\" ...

stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run start
stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run::upgrade start

: "${STORAGE_CLASS:=$(kubectl get storageclass 2>/dev/null | awk '/(default)/ { print $1 ; exit }')}"
: "${DOMAIN:=cf-dev.io}"
: "${TCP_DOMAIN:=tcp.${DOMAIN}}"
: "${UAA_HOST:=uaa.${DOMAIN}}"
: "${INSECURE_DOCKER_REGISTRIES:=\"insecure-registry.${TCP_DOMAIN}:20005\"}"

helm_args=(
    # We need --recreate-pods in case an upgrade causes an existing pod to go unready.
    # In which case, the normal StatefulSet logic would cause it to get stuck.
    --recreate-pods
    --namespace "${NAMESPACE}"
    --values "bin/settings.yaml"
    --set "env.DOMAIN=${DOMAIN}"
    --set "env.TCP_DOMAIN=${TCP_DOMAIN}"
    --set "env.UAA_HOST=${UAA_HOST}"
    --set "env.INSECURE_DOCKER_REGISTRIES=${INSECURE_DOCKER_REGISTRIES}"
    --set "kube.storage_class.persistent=${STORAGE_CLASS}"
)

if [ "${EMBEDDED_UAA:-false}" != "true" ]; then
    CA_CERT="$(get_secret "${UAA_NAMESPACE}" "uaa" "INTERNAL_CA_CERT")"

    helm_args+=(
        --set "secrets.UAA_CA_CERT=${CA_CERT}"
    )
else
    helm_args+=(
        --set "enable.uaa=true"
    )
fi

if [ -n "${INGRESS_CONTROLLER:-}" ]; then
    helm_args+=(
        --set "ingress.enabled=true"
        --set "ingress.annotations.kubernetes\.io\/ingress\.class=${INGRESS_CONTROLLER}"
        --set "env.UAA_PORT=443"
    )
else
    helm_args+=(
        --set "kube.external_ips[0]=$(getent hosts "${DOMAIN}" | awk 'NR=1{print $1}')"
        --set "env.UAA_PORT=${UAA_PORT}"
    )
fi

# Force rotate secrets
if [ -n "${SCF_SECRETS_GENERATION_COUNTER:-}" ] ; then
    helm_args+=(
        --set "kube.secrets_generation_counter=${SCF_SECRETS_GENERATION_COUNTER}"
    )
fi

echo helm upgrade "${RELEASE}" "${CF_CHART}" "${helm_args[@]}" "$@"

helm upgrade "${RELEASE}" "${CF_CHART}" "${helm_args[@]}" "$@"

stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run::upgrade end
stampy "${GIT_ROOT}/scf_metrics.csv" "$0" make-run 'done'
